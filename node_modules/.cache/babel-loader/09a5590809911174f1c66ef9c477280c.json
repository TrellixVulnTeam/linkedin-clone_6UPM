{"ast":null,"code":"import { Redirect } from \"react-router\";\nimport { auth, provider, storage } from \"../Firebase\";\nimport db from \"../Firebase\";\nimport { SET_LOADING_STATUS, SET_USER } from \"./ActionType\";\nexport const setUser = payload => ({\n  type: SET_USER,\n  user: payload\n});\nexport const setLoading = status => ({\n  type: SET_LOADING_STATUS,\n  status: status\n});\nexport function signInAPI() {\n  return dispatch => {\n    auth.signInWithPopup(provider).then(payload => {\n      dispatch(setUser(payload.user));\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n}\nexport function getUserAuth() {\n  return dispatch => {\n    auth.onAuthStateChanged(async user => {\n      if (user) {\n        dispatch(setUser(user));\n      }\n    });\n  };\n}\nexport function signOutAPI() {\n  return dispatch => {\n    auth.signOut().then(() => {\n      dispatch(setUser(null));\n    }).catch(error => console.log(error.message));\n  };\n}\nexport function postArticleAPI(payload) {\n  return dispatch => {\n    dispatch(setLoading(true));\n\n    if (payload.image != \"\") {\n      const upload = storage.ref(`images/${payload.image.name}`).put(payload.image);\n      upload.on(\"state_changed\", snapshot => {\n        const progress = snapshot.bytesTransferred / snapshot.totalBytes * 100;\n        console.log(`Progress: ${progress}%`);\n\n        if (snapshot.state === \"RUNNING\") {\n          console.log(`Progress: ${progress}%`);\n        }\n      }, error => console.log(error.code), async () => {\n        const downloadURL = await upload.snapshot.ref.getDownloadURL();\n        db.collection(\"articles\").add({\n          actor: {\n            description: payload.user.email,\n            title: payload.user.displayName,\n            date: payload.timestamp,\n            image: payload.user.photoURL\n          },\n          video: payload.video,\n          sharedImg: downloadURL,\n          comments: 0,\n          description: payload.description\n        });\n        dispatch(setLoading(false));\n      });\n    } else if (payload.video) {\n      db.collection(\"articles\").add({\n        actor: {\n          description: payload.user.email,\n          title: payload.user.displayName,\n          date: payload.timestamp,\n          image: payload.user.photoURL\n        },\n        video: payload.video,\n        sharedImg: \"\",\n        comments: 0,\n        description: payload.description\n      });\n      dispatch(setLoading(false));\n    }\n  };\n}\nexport function getArticlesAPI() {\n  return dispatch => {};\n}","map":{"version":3,"sources":["/Users/jibrilmohamed/Documents/reactJS/linkedin-clone/src/action/index.js"],"names":["Redirect","auth","provider","storage","db","SET_LOADING_STATUS","SET_USER","setUser","payload","type","user","setLoading","status","signInAPI","dispatch","signInWithPopup","then","catch","error","console","log","getUserAuth","onAuthStateChanged","signOutAPI","signOut","message","postArticleAPI","image","upload","ref","name","put","on","snapshot","progress","bytesTransferred","totalBytes","state","code","downloadURL","getDownloadURL","collection","add","actor","description","email","title","displayName","date","timestamp","photoURL","video","sharedImg","comments","getArticlesAPI"],"mappings":"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","sourcesContent":["import { Redirect } from \"react-router\";\nimport { auth, provider, storage } from \"../Firebase\";\nimport db from \"../Firebase\";\nimport { SET_LOADING_STATUS, SET_USER } from \"./ActionType\";\n\nexport const setUser = (payload) => ({\n  type: SET_USER,\n  user: payload,\n});\nexport const setLoading = (status) => ({\n  type: SET_LOADING_STATUS,\n  status: status,\n});\nexport function signInAPI() {\n  return (dispatch) => {\n    auth\n      .signInWithPopup(provider)\n      .then((payload) => {\n        dispatch(setUser(payload.user));\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n}\n\nexport function getUserAuth() {\n  return (dispatch) => {\n    auth.onAuthStateChanged(async (user) => {\n      if (user) {\n        dispatch(setUser(user));\n      }\n    });\n  };\n}\n\nexport function signOutAPI() {\n  return (dispatch) => {\n    auth\n      .signOut()\n      .then(() => {\n        dispatch(setUser(null));\n      })\n      .catch((error) => console.log(error.message));\n  };\n}\n\nexport function postArticleAPI(payload) {\n  return (dispatch) => {\n    dispatch(setLoading(true));\n    if (payload.image != \"\") {\n      const upload = storage\n        .ref(`images/${payload.image.name}`)\n        .put(payload.image);\n      upload.on(\n        \"state_changed\",\n        (snapshot) => {\n          const progress =\n            (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n          console.log(`Progress: ${progress}%`);\n          if (snapshot.state === \"RUNNING\") {\n            console.log(`Progress: ${progress}%`);\n          }\n        },\n        (error) => console.log(error.code),\n        async () => {\n          const downloadURL = await upload.snapshot.ref.getDownloadURL();\n          db.collection(\"articles\").add({\n            actor: {\n              description: payload.user.email,\n              title: payload.user.displayName,\n              date: payload.timestamp,\n              image: payload.user.photoURL,\n            },\n            video: payload.video,\n            sharedImg: downloadURL,\n            comments: 0,\n            description: payload.description,\n          });\n          dispatch(setLoading(false));\n        }\n      );\n    } else if (payload.video) {\n      db.collection(\"articles\").add({\n        actor: {\n          description: payload.user.email,\n          title: payload.user.displayName,\n          date: payload.timestamp,\n          image: payload.user.photoURL,\n        },\n        video: payload.video,\n        sharedImg: \"\",\n        comments: 0,\n        description: payload.description,\n      });\n      dispatch(setLoading(false));\n    }\n  };\n}\n\nexport function getArticlesAPI() {\n  return (dispatch) => {};\n}\n"]},"metadata":{},"sourceType":"module"}